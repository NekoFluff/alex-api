openapi: 3.0.3
info:
  title: alex-api
  description: HTTP server in Go with Swagger endpoints definition. An API for all my hobbies.
  contact:
    name: API Support
    email: alexnou@gmail.com
  version: 0.2.3
servers:
- url: https://alex-api.herokuapp.com
tags:
- name: Dyson Sphere Program
  description: Endpoints related to Dyson Sphere Program
- name: Black Desert Online
  description: Endpoints releated to Black Desert Online
- name: Twitter
  description: Endpoints realted to using twitter's API
paths:
  /dsp/computedRecipes:
    post:
      tags:
      - Dyson Sphere Program
      summary: Get the computed recipe
      description: Get the computed recipe
      operationId: getDSPComputedRecipe
      parameters:
      - in: query
        name: group
        schema:
          type: boolean
        description: Whether or not to group the recipes in the computed recipe up by name
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ComputedRecipeRequest"
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComputedRecipe"
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: recipeRequest
  /dsp/recipes:
    get:
      tags:
      - Dyson Sphere Program
      summary: Get all DSP recipes
      description: Get all DSP recipes
      operationId: getDSPRecipes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Recipe"
  /dsp/recipes/reload:
    post:
      tags:
      - Dyson Sphere Program
      summary: Re-scrapes the DSP recipes
      description: Re-scrapes the DSP recipes
      operationId: reloadDSPRecipes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum:
                - OK
  /twitter/inArt:
    get:
      tags:
      - Twitter
      summary: Get inART
      description: Get inART
      operationId: getInArt
      parameters:
      - name: page
        in: query
        description: Numeric ID of the page to get
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TwitterMedia"
  /bdo/computedRecipes:
    post:
      tags:
      - Black Desert Online
      summary: Get the computed recipe
      description: Get the computed recipe
      operationId: getBDOComputedRecipe
      parameters:
      - in: query
        name: group
        schema:
          type: boolean
        description: Whether or not to group the recipes in the computed recipe up by name
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ComputedRecipeRequest"
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComputedRecipe"
        405:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: recipeRequest
  /bdo/recipes:
    get:
      tags:
      - Black Desert Online
      summary: Get all BDO recipes
      description: Get all BDO recipes
      operationId: getBDORecipes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    $ref: "#/components/schemas/Recipe"
components:
  schemas:
    TwitterMedia:
      required:
      - author
      - createdAt
      - height
      - possiblySensitive
      - tweetId
      - url
      - width
      type: object
      properties:
        author:
          $ref: "#/components/schemas/TwitterAuthor"
        tweetId:
          type: string
        url:
          type: string
        width:
          type: integer
        height:
          type: integer
        possiblySensitive:
          type: boolean
        createdAt:
          type: string
    TwitterAuthor:
      required:
      - id
      - name
      - username
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
    Recipe:
      required:
      - outputItem
      - outputItemCount
      - facility
      - materials
      - time
      type: object
      properties:
        outputItem:
          type: string
        outputItemCount:
          type: number
        facility:
          type: string
        time:
          type: number
        materials:
          $ref: "#/components/schemas/Materials"
        image:
          type: string
    Materials:
      type: object
      additionalProperties:
        type: string
      example:
        Plank: 1
    ComputedRecipeRequest:
      required:
      - rate
      - name
      type: object
      properties:
        name:
          type: string
        rate:
          type: number
        requirements:
          type: object
          additionalProperties:
            type: number
      example:
        name: "Proliferator Mk.III"
        rate: 2.0
        requirements:
          "Carbon Nanotube": 1
    ComputedRecipe:
      required:
      - outputItem
      - facility
      - numFacilitiesNeeded
      - itemsConsumedPerSec
      - secondsSpentPerCraft
      - usedFor
      type: object
      properties:
        outputItem:
          type: string
        facility:
          type: string
        numFacilitiesNeeded:
          type: number
        itemsConsumedPerSec:
          type: object
          properties: {}
        secondsSpentPerCraft:
          type: number
        craftingPerSecond:
          type: number
        usedFor:
          type: string
        depth:
          type: number
        action:
          type: string
        quantityProduced:
          type: number
        timeToProduce:
          type: number
        marketData:
          $ref: "#/components/schemas/MarketData"
        image:
          type: string
    MarketData:
      type: object
      properties:
        marketDataID:
          type: string
        lastUpdateAttempt:
          type: number
        lastUpdated:
          type: number
        price:
          type: number
        quantity:
          type: number
        totalTradeCount:
          type: number
        name:
          type: string
