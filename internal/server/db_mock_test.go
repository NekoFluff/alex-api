// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package server is a generated GoMock package.
package server

import (
	data "alex-api/internal/data"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// DeletePageView mocks base method.
func (m *MockDB) DeletePageView(domain, path string) *mongo.DeleteResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePageView", domain, path)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	return ret0
}

// DeletePageView indicates an expected call of DeletePageView.
func (mr *MockDBMockRecorder) DeletePageView(domain, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePageView", reflect.TypeOf((*MockDB)(nil).DeletePageView), domain, path)
}

// GetPageView mocks base method.
func (m *MockDB) GetPageView(domain, path string) (data.PageView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageView", domain, path)
	ret0, _ := ret[0].(data.PageView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageView indicates an expected call of GetPageView.
func (mr *MockDBMockRecorder) GetPageView(domain, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageView", reflect.TypeOf((*MockDB)(nil).GetPageView), domain, path)
}

// GetRecipes mocks base method.
func (m *MockDB) GetRecipes(skip, limit *int64) ([]data.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipes", skip, limit)
	ret0, _ := ret[0].([]data.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipes indicates an expected call of GetRecipes.
func (mr *MockDBMockRecorder) GetRecipes(skip, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipes", reflect.TypeOf((*MockDB)(nil).GetRecipes), skip, limit)
}

// GetTwitterMedia mocks base method.
func (m *MockDB) GetTwitterMedia(skip, limit *int64) ([]data.TwitterMedia, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwitterMedia", skip, limit)
	ret0, _ := ret[0].([]data.TwitterMedia)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTwitterMedia indicates an expected call of GetTwitterMedia.
func (mr *MockDBMockRecorder) GetTwitterMedia(skip, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwitterMedia", reflect.TypeOf((*MockDB)(nil).GetTwitterMedia), skip, limit)
}

// UpdatePageView mocks base method.
func (m *MockDB) UpdatePageView(pageView data.PageView) *mongo.UpdateResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageView", pageView)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	return ret0
}

// UpdatePageView indicates an expected call of UpdatePageView.
func (mr *MockDBMockRecorder) UpdatePageView(pageView interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageView", reflect.TypeOf((*MockDB)(nil).UpdatePageView), pageView)
}
