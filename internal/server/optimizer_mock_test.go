// Code generated by MockGen. DO NOT EDIT.
// Source: optimizer.go

// Package server is a generated GoMock package.
package server

import (
	recipecalc "alex-api/internal/recipecalc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOptimizer is a mock of Optimizer interface.
type MockOptimizer struct {
	ctrl     *gomock.Controller
	recorder *MockOptimizerMockRecorder
}

// MockOptimizerMockRecorder is the mock recorder for MockOptimizer.
type MockOptimizerMockRecorder struct {
	mock *MockOptimizer
}

// NewMockOptimizer creates a new mock instance.
func NewMockOptimizer(ctrl *gomock.Controller) *MockOptimizer {
	mock := &MockOptimizer{ctrl: ctrl}
	mock.recorder = &MockOptimizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptimizer) EXPECT() *MockOptimizerMockRecorder {
	return m.recorder
}

// CombineRecipes mocks base method.
func (m *MockOptimizer) CombineRecipes(recipes []recipecalc.ComputedRecipe) []recipecalc.ComputedRecipe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombineRecipes", recipes)
	ret0, _ := ret[0].([]recipecalc.ComputedRecipe)
	return ret0
}

// CombineRecipes indicates an expected call of CombineRecipes.
func (mr *MockOptimizerMockRecorder) CombineRecipes(recipes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombineRecipes", reflect.TypeOf((*MockOptimizer)(nil).CombineRecipes), recipes)
}

// GetOptimalRecipe mocks base method.
func (m *MockOptimizer) GetOptimalRecipe(itemName string, rate float64, recipeName string, ignore map[string]bool, depth int64, requirements recipecalc.RecipeRequirements) []recipecalc.ComputedRecipe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptimalRecipe", itemName, rate, recipeName, ignore, depth, requirements)
	ret0, _ := ret[0].([]recipecalc.ComputedRecipe)
	return ret0
}

// GetOptimalRecipe indicates an expected call of GetOptimalRecipe.
func (mr *MockOptimizerMockRecorder) GetOptimalRecipe(itemName, rate, recipeName, ignore, depth, requirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptimalRecipe", reflect.TypeOf((*MockOptimizer)(nil).GetOptimalRecipe), itemName, rate, recipeName, ignore, depth, requirements)
}

// GetRecipes mocks base method.
func (m *MockOptimizer) GetRecipes() [][]recipecalc.Recipe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipes")
	ret0, _ := ret[0].([][]recipecalc.Recipe)
	return ret0
}

// GetRecipes indicates an expected call of GetRecipes.
func (mr *MockOptimizerMockRecorder) GetRecipes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipes", reflect.TypeOf((*MockOptimizer)(nil).GetRecipes))
}

// SetRecipes mocks base method.
func (m *MockOptimizer) SetRecipes(recipes map[string][]recipecalc.Recipe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRecipes", recipes)
}

// SetRecipes indicates an expected call of SetRecipes.
func (mr *MockOptimizerMockRecorder) SetRecipes(recipes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecipes", reflect.TypeOf((*MockOptimizer)(nil).SetRecipes), recipes)
}

// SortRecipes mocks base method.
func (m *MockOptimizer) SortRecipes(recipes []recipecalc.ComputedRecipe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SortRecipes", recipes)
}

// SortRecipes indicates an expected call of SortRecipes.
func (mr *MockOptimizerMockRecorder) SortRecipes(recipes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortRecipes", reflect.TypeOf((*MockOptimizer)(nil).SortRecipes), recipes)
}
